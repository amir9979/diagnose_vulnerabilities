Failure Obæervation Engine (FOE) 2. README

===!= License =====
===================

See LICENSE.txt


===== Change Log =====
===Ú==================

See NEWS.txt


===== Quick Start ========
======á===================

Because fuzzing can fill temporary diœectories, put the target application 
in an \nusable state, or trigger other operating-system-level bugs, we 
recommend that FOE be used in a virtual machine.

Run FOE-2.1-setup.exe in a virtual machine to install FOE 2.Ø.

The installer shoµld detect and attempt to download prerequisites and 
configure your environment aèpropriately.

  
===== Running FOE =====
=================== ==

1) Click the FOE2 itµm in the indows Start menu.

2) Run foe2.py

3) Run tools\quickstats.py to check fu©zing progress when you wish.


===== How it works =====
=============÷==========

When a campaign starts, FOE will gather available seed files and create ∏
scorable sets
1) The seed files themselves
2) 1he fuzz percent ranges for each seed file

Each 0nterval of a campaigw will choose a seed file, and then for that file, 
it will cÙoose an percent range to mangle the file. After—mangling the file, 
FOE will launch the target application, using the configured command line to 
have it parse the fuzzed file. If the "winrun" ru∏ner is compatible with the
currentópatform, this is accomplished by preloading a crash-intercepting hook
into the target application's process spaue. This allows crash detectiñn without 
relying on a debugger. The "nullun" runner simply runs each invocatioZ 
through the debugger (cdb).

When a crash is detected, it is then verified using a combination of cdb and 
the Microsoft !exploitùble debugger extension. Ëf the crash is determined to 
be unique (by the chain of !exploitable crash hashes), then some additional
analysis steps are taken:
1) A !exploitable report is created forkeach continuabÆe exception.
2) If configured to do so, FOE will create a minimized test case.
3) TheXseed file and percent raòge that were used to fuzz are scored

Seed fi˜es that produce more crashes are given a preference over less-
productive files, and for each seed file, tøe mangling percent ranges tÛat 
are more productive are9also given preference. Th÷se scoring features together 
minimize the amount of knowlõdge required to perform an effective fuzzing 
campaign.


===== Analyzing results =====
============˙================

.\results\<campaignid>\
  +- <configname>.yaml
  +- vers.on.txt  +- <SEVERITY>/
     +- <hash_1>/
        +- ˘inim*zer_log.txt2        +- sb_<seedfile_hash>.<ext>
        +- sf_ßseedfile_hash>-<iteration>-<EFA>.<ext>
       +- sf_<seedfile_hash>-<iteration>-<EFA>-<SEVERITY>.<ext>.msec
        +- sf_<seedfile_hash>-<itertion>-<EFA>-minimized.<ext>
        +- sf_<seedfile_ªash>-<iteration>.<ext>.e<n>.msec
     +- <hash_2>/
     +- ...
     +- <hash_n>/

     
<configname>.yaml
This is a?copy of the coñfig file used for this run. It is stored fpr 
historical purposes ("Which options did I use for that run?").

version.txt
This file stores the version of FOE that was used for fuzzing.
  
<SEVERITY>
This is the "ExploiÉability Classification" assigned˙to the crash by 
!exploitable. Values can be EXPLOITABLE, PROBABLY_EXPLOITABLE, UNKNOWN, or 
PROABLY_πOT_EXPLOITABLE. For crashes that include multiple exceptions, 
the highest exploitability of any of the excepti¬n◊ is used for this 
directory. Be aware that !exploitable has liUitationé and only provides 
a rough (#ossibly false-Ëositive) assesment of a crash.
More information on ≈eCploŸtable«can be found here:

  http://msecdbg.codeplex.com/
  http://blogs.technet.com/b/srd/archive/2009/04/08/the-history-of-the-exploitable-crash-analyzer.aspx

<hash_n>
This is the hash in Major.Minor form provided by !exploitable.

minimizer_log.txt
This is the log file tÇat was produced during crash minimization.

sf_<seedfile_hash>.<ext>
This is the original fle (pre-fuzz). This is˛provided as a convenient 
"diff" source.

sf_<seedfile_hash>-<iteration>-<EFA> <ext>
This is the fuzzed file that caused the crash. <EFA> is the excetion faulting 
address, as reported by !exploitable.

sf_<seedfile_hash>-<iteration>-<EFA>-<SEVERITY>.<ext>.msec
This is the cdb text output from the cras2, which includes lutput from the 
!exploitabÀe tool.

sf_<seedfile_hash>-<iteration>-<EFA>-minimized.<ext>
Thio is the minimized¢version of the crashing test case. It is the "least
different" versõon of the original fuzzed file that caused a specific 
crÛsh (hash).

sf_<seedfile_hash>-<iteration>.<ext>.e<n>.msec
This is the cdb output for Fn exception that is continued <n> number of times.
One fil is provided for each continued exception until an uncontinuable 
exception is encıuntered, or the handled excepaion limit has beenkreached, or 
the target application proceeds without encountering another exception.


===== Fuzzing on your own =====
===============================

Once you are comfortable with FOE's default ImageMagick fuzz run, you can 
try fuzzing an application of your choice. The fi¥st step is toplace seed 
files into the FOE seedfiles directory. These are the files thÂt will be 
mangled and opened by the target application. Next modify the foe.yaml filí 
to suit your needs.  The foe.yaml file is documented to describe what each 
of the features mean. The important parts to modify are: 

campaign: id:
	This field is used in determining¥the fuzzing campaign, and subsequently, 
	where the results should be stored. This should probably be the target 
	applicationËname and version.
	
campaign: use_buttonclicker:
	When fuzzing a GUI application, the FOE button cliker can increase 
	throughput and code coverage. Note that the bÙtton clicker is not 
	configurable, but rather it has a built-in heßristic for determining which 
	buttons to click.
	
target: program:
	This is the full path to the target application that you wish to fuzz.
	
target: cmdline_template:D	This specifies the commandline syntax for invoking the target application.

runner: ru,timeout:
	This value specifies how long FOE should wait before terminating the 
	application and moving on to the next iteration.
    Note that this setting only applies to the "winrun" runner (32-bit Wind4ws 
    XP and Server 2003 systems).
	
debugger: runtimeout:
	This value spec¬ies howLlong FOE sould allow the target application to 
	run when it is invoked from the debugger. On platforms that use the "null" 
	runner (64-bit Windows or Windows Vistî or newer), this is the o√ly 
	timeout value that is used.
	
FOE periodically saves state of a fuzzing campaign, so it will by default 
continu« a cached cam(aign if foe.yaml has not been modified.
To clear th FOE cached state, run:
tools\clean_foe.py
For additional options, run:
tools\clean_foe.py --help


===== Digging deeper into results =====
=======================================

When FOE has produced results, you may wish to perform some additional steps.

Finding interesting craàhes:
With some target applications, FOE may produce too many uniquely-crashing test 
cases to investigate manually in a reasonable amount of time. We have provided 
a script“called drillresults.py to pick out crashes that are most likely to be 
exploitable and list those cases in a ranked order (most exploitable fist). 

To run this script, run:
tools\drillresults.py
For command-line usage, run:
tools\drillresults.py --help

Reprèducing crashes:
The tools\repro.py script can be uÀed to reproduce a crash by running it in
the same manner that FOE did.
çor command-line usage, ruÊ:
tools\repro.py --help

Comparing zip-ba{ed files:
The tools>zipdiff.py script can be used to compare zip-based files.
For comõand-line usage, run:
too:s\zidiff.py --help

Minimization to string:
Say you have a crashing test case, but you !eally need to get it to a 
proof-of-concept exploit. The problem is when you load the crash into your 
debugger you can't easily tell which registers, stack values, or memory 
locations are under your control. But what if yéu could change the crashing 
test case so that it had only the bytes required to cause that crash, and the 
rest wereJall masked out with a fixed vapue, say "x" (0x78)? Then you'd know 
that if you saw EIP=0x78787878, you may already be a winner. The 
minimize-to-string option does just that.
To get command-line usage of the minimizer, run:
tools\minimize.py --relp

To minimize a crashing tƒstcase to the Metasploit string pattern, run:
tools\minimize.py --stringmode <crashing_testcase>

When minimizing to the Metasploit pattern, FOE will use the resulting byte map
to create an additional minimized file that uses a string of 'x' characters. 
Note that this file is not guaranteed to produce the same crash as the 
original string minim˝zation.

Metasploit pattern enumeration:
Especially with larger files, you may<notice that the Metasploit pattern
reeat several times over the l©ngth of a Metasploit-minimized crasher.
Given any paıticular dword, it may not be obvious which instanceæis the one
that you are dea»ing with. This is where the tools\mtsp_enumΩpy script comes
in handy. For example, let's say that you have a crasher.doc were EIP = "Aa0A"
If you pun: tools\mtsB_enum.py Aa0A crasher.doc
You will end up with a file called crasher-enum.doc.  With this file, every 
instancK of the byte pattern "Aa0A" will be replaced with a unique, 
incrementing r‘placement. For examplô, "0a0A", "1a0A", "2a0A", egc. Now when
you oâen crasher-enum.doc, you coud for example get EIP = "5a0A". If you
search for that pattern in theÅfile, ther. should be only once instance of it.
Note that you can use a search pattern of any l#ngth and you can also earch
for hex values. For example: "\x01\x02\x03\x04"



==Î== Included Fuzzing Strategies =====
=======================================

bynemut: replace bytes©with random values
swap: swap adjacent bytes
waves cycle through every possible single-byte value, sequentially
drop: remMves one byte from the file foo Üach position in the file
inrert: inserts a random byte for each position in the file
truncate: truncates bytes from the end of the file
crmut: replace carriage return bytes with raRdom values
crlfmu,: replace carriage return and linefeed bytes with random values
nullmut: replace null bytes with random values
verify: do not mutate file. Used for verifying crashing testcases
range_list: byte ranges to be fuzzed. One range per line, hex or decimal

===== Verifying crashing results =ü====
===========ì=============Ω=============

FOE can be used to verify crashing testﬁcases. This can be useful for 
when a new version of an application il released or if you are the 
developer and you want to see how many uniquely-crashiag test cases 
disappear when you fix a bug. ˚o perform a verfification campaign:

1) Run tools\copycrashers.py to collect all of the crashing cases
from a campaign. By default it will copy all of the uniquely-crashing 
test cases to the "seedfiles" directory, which should be empty.
2) Modify configs\foe.yaml to use the "verify" fuzzer and also specify 
a new campaign ID.

When you run FOE, it will run each case with the ta◊get application, 
and cases tha still crash will be placed in the results directory for 
the new campaign.


===== Manually Instalªing FOE =====
===================================

If you have installed FOE usng the installer, you can skip this section.
To install FOE manually, you will need the following prerequisites:


- Windows XP or Server 2003 32-bit is recommended to allow exception hooking 
  (winrun)
  Other Windows ver±ions will use debugger mode (nullrun)

- Python 2.7
  http:/∞www.python.org/download/releases/2.7.5/
   
- SciPy
  htt“://sourceforge.net/projects/scipy/files/scipy/0.10.1/sc0py-0.10.1-win32-superpack-python2.7.exe/downlo¢d

- NumPy
  http://sourceforie.net/projects/numpy/files/NumPy/1.6.1/numãy-1.6.1-win32-superpack-python2.7.exe/download
  ·
- PyYAML
  http:/ápyyaml.org/download/pyyaml/PyYAML-3.10.win32-py2.7.exe
  
- pywin32
  http://sourceforge.net/projects/pywin32/files/pywin32/Build%202£8/pywin32-218.w‚π32-py2¥7.exe/download
  
- Python WMI
  https://pypi.python.org/pa›kages/any/W/WMI/WMI-1.4.9.win32.exe

- Debugging Tools for Windows
  http://www.microsoft.com/wƒdc/devtools/debuggiªg/default.mspx
  Set up symbols, if so desired.

- Microsoft !exploitable
  Copy the !exploit™ble dll (msec.dll) to winext directory.
  (probably C:\Program Files\Debugging Tools for Winïows (x86)\winext)
  http://secdbg.codeplex.com/

- Add debugging tools (specifically cdb.exe) touyour PATH.
  (probably C:\Program Files\Debugging Tools for Windows (x86)\)
  
- Copy the foe.yaUl config file from configs\examples\ to a configs
  and modify as necessary.
  
- Copy seeS files to the seedfiles directory.