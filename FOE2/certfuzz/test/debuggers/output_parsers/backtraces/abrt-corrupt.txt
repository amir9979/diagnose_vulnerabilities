BFD: Warning: /var/spool/abrt/ccpp-1278938424-2512/coredump is truncated: expected core file size >= 131293184, found: 643072.
[New Thread 2512]
Cannot access memory at address 0x30b7220108
Cannot access memory at address 0x30b7220108
Cannot access memory at address 0x30b7220108
Failed to read a valid object file image from memory.
Core was generated by `compiz --ignore-desktop-hints glib gconf gnomecompat'.
Program terminated with signal 11, Segmentation fault.
#0  doPoll (timeout=<value optimized out>) at display.c:1209
1209		for (i = core.nWatchFds - 1, w = core.watchFds; w; i--, w = w->next)

Thread 1 (Thread 2512):
Cannot access memory at address 0x7fff51eb6048
From                To                  Syms Read   Shared Object Library
0x00000030b7000af0  0x00000030b7018934  Yes         /lib64/ld-linux-x86-64.so.2
No symbol "__abort_msg" in current context.
No symbol "__glib_assert_msg" in current context.
rax            0x2a39610	44275216
rbx            0x7661736e65657263	8530226087201174115
rcx            0x30	48
rdx            0x31a1ca0	52042912
rsi            0x0	0
rdi            0x30b777ae80	209236504192
rbp            0xfffffffffffffff0	0xfffffffffffffff0
rsp            0x7fff51eb6030	0x7fff51eb6030
r8             0x30c5217c00	209465736192
r9             0x1	1
r10            0x0	0
r11            0x246	582
r12            0x1	1
r13            0x7fff	32767
r14            0x20c49ba5e353f7cf	2361183241434822607
r15            0x0	0
rip            0x40ef9e	0x40ef9e <doPoll+94>
eflags         0x10246	[ PF ZF IF RF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
Dump of assembler code for function doPoll:
   0x000000000040ef40 <+0>:	push   %r12
   0x000000000040ef42 <+2>:	movslq 0x22d2ef(%rip),%rsi        # 0x63c238 <core+120>
   0x000000000040ef49 <+9>:	mov    %edi,%edx
   0x000000000040ef4b <+11>:	mov    0x22d2de(%rip),%rdi        # 0x63c230 <core+112>
   0x000000000040ef52 <+18>:	push   %rbp
   0x000000000040ef53 <+19>:	push   %rbx
   0x000000000040ef54 <+20>:	callq  0x40ae30 <poll@plt>
   0x000000000040ef59 <+25>:	test   %eax,%eax
   0x000000000040ef5b <+27>:	mov    %eax,%r12d
   0x000000000040ef5e <+30>:	je     0x40efaa <doPoll+106>
   0x000000000040ef60 <+32>:	mov    0x22d2b9(%rip),%rbx        # 0x63c220 <core+96>
   0x000000000040ef67 <+39>:	mov    0x22d2cb(%rip),%ebp        # 0x63c238 <core+120>
   0x000000000040ef6d <+45>:	test   %rbx,%rbx
   0x000000000040ef70 <+48>:	je     0x40efaa <doPoll+106>
   0x000000000040ef72 <+50>:	sub    $0x1,%ebp
   0x000000000040ef75 <+53>:	movslq %ebp,%rbp
   0x000000000040ef78 <+56>:	shl    $0x3,%rbp
   0x000000000040ef7c <+60>:	nopl   0x0(%rax)
   0x000000000040ef80 <+64>:	mov    0x22d2a9(%rip),%rax        # 0x63c230 <core+112>
   0x000000000040ef87 <+71>:	cmpw   $0x0,0x6(%rax,%rbp,1)
   0x000000000040ef8d <+77>:	je     0x40ef9e <doPoll+94>
   0x000000000040ef8f <+79>:	mov    0x10(%rbx),%rax
   0x000000000040ef93 <+83>:	test   %rax,%rax
   0x000000000040ef96 <+86>:	je     0x40ef9e <doPoll+94>
   0x000000000040ef98 <+88>:	mov    0x18(%rbx),%rdi
   0x000000000040ef9c <+92>:	callq  *%rax
=> 0x000000000040ef9e <+94>:	mov    (%rbx),%rbx
   0x000000000040efa1 <+97>:	sub    $0x8,%rbp
   0x000000000040efa5 <+101>:	test   %rbx,%rbx
   0x000000000040efa8 <+104>:	jne    0x40ef80 <doPoll+64>
   0x000000000040efaa <+106>:	pop    %rbx
   0x000000000040efab <+107>:	pop    %rbp
   0x000000000040efac <+108>:	mov    %r12d,%eax
   0x000000000040efaf <+111>:	pop    %r12
   0x000000000040efb1 <+113>:	retq   
End of assembler dump.
